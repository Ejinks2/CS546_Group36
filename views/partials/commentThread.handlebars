{{#each comments}}
<div class="comment-card mb-3" data-comment-id="{{this._id}}">
  <div class="card">
    <div class="card-body">
      <div class="d-flex justify-content-between align-items-start">
        <h6 class="card-subtitle mb-2 text-muted">{{this.username}}</h6>
        <small class="text-muted">{{formatDate this.createdAt}}</small>
      </div>
      <p class="card-text">{{this.content}}</p>
      <div class="d-flex justify-content-between align-items-center">
        <div class="flag-section">
          <button class="btn btn-sm {{#if this.hasFlagged}}btn-danger{{else}}btn-outline-danger{{/if}} flag-btn" 
                  data-content-id="{{this._id}}" 
                  data-content-type="comment">
            <i class="fas fa-flag"></i> Flag
            <span class="flag-count">{{this.flagCount}}</span>
          </button>
        </div>
        {{#if ../isOwner}}
        <button class="btn btn-sm btn-outline-danger delete-comment" data-comment-id="{{this._id}}">
          <i class="fas fa-trash"></i> Delete
        </button>
        {{/if}}
      </div>
    </div>
  </div>
</div>
{{/each}}

{{#if user}}
<div class="add-comment-section mt-4">
  <form id="commentForm" class="mb-3">
    <div class="form-group">
      <textarea class="form-control" id="commentContent" rows="3" placeholder="Add a comment..."></textarea>
    </div>
    <button type="submit" class="btn btn-primary mt-2">Post Comment</button>
  </form>
</div>
{{else}}
<div class="alert alert-info mt-4">
  Please <a href="/login">log in</a> to comment.
</div>
{{/if}}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const commentForm = document.getElementById('commentForm');
  const flagButtons = document.querySelectorAll('.flag-btn');
  const deleteButtons = document.querySelectorAll('.delete-comment');

  // Handle comment submission
  if (commentForm) {
    commentForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      const content = document.getElementById('commentContent').value.trim();
      if (!content) return;

      try {
        const response = await fetch('/comments/{{crimeId}}', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ content })
        });

        if (response.ok) {
          window.location.reload();
        } else {
          const data = await response.json();
          alert(data.error || 'Failed to post comment');
        }
      } catch (error) {
        console.error('Error posting comment:', error);
        alert('Failed to post comment');
      }
    });
  }

  // Handle flagging
  flagButtons.forEach(button => {
    button.addEventListener('click', async function() {
      const contentId = this.dataset.contentId;
      const contentType = this.dataset.contentType;
      const reason = prompt('Please provide a reason for flagging:');
      
      if (!reason) return;

      try {
        const response = await fetch(`/flags/${contentType}/${contentId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ reason })
        });

        if (response.ok) {
          const data = await response.json();
          this.classList.toggle('btn-danger');
          this.classList.toggle('btn-outline-danger');
          this.querySelector('.flag-count').textContent = data.flagCount;
        } else {
          const data = await response.json();
          alert(data.error || 'Failed to flag content');
        }
      } catch (error) {
        console.error('Error flagging content:', error);
        alert('Failed to flag content');
      }
    });
  });

  // Handle comment deletion
  deleteButtons.forEach(button => {
    button.addEventListener('click', async function() {
      if (!confirm('Are you sure you want to delete this comment?')) return;

      const commentId = this.dataset.commentId;
      try {
        const response = await fetch(`/comments/${commentId}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          const commentCard = this.closest('.comment-card');
          commentCard.remove();
        } else {
          const data = await response.json();
          alert(data.error || 'Failed to delete comment');
        }
      } catch (error) {
        console.error('Error deleting comment:', error);
        alert('Failed to delete comment');
      }
    });
  });
});
</script> 